<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 风澈</title>
        <link>https://windclearing.github.io/post/</link>
        <description>Recent content in Posts on 风澈</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Wed, 19 Mar 2025 22:08:44 +0800</lastBuildDate><atom:link href="https://windclearing.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>20years</title>
        <link>https://windclearing.github.io/p/20years/</link>
        <pubDate>Wed, 19 Mar 2025 22:08:44 +0800</pubDate>
        
        <guid>https://windclearing.github.io/p/20years/</guid>
        <description>&lt;h1 id=&#34;202532020岁了&#34;&gt;2025/3/20，20岁了。
&lt;/h1&gt;&lt;p&gt;第二个十年结束了。&lt;/p&gt;
&lt;p&gt;想干的事太多了，可是确实难以取舍，而取舍是必要的。没有出众的天赋与惊人的壮举，泯然于环境，似乎是逃脱不掉的宿命。&lt;/p&gt;
&lt;p&gt;还记得中学时代我曾想着，在20岁之前要做出点什么；显然，我并没能做好任何一件事，更别说能迎合青春年华的朝气与希望。&lt;/p&gt;
&lt;p&gt;九年前，我还在与小学同学嘻嘻哈哈，偶尔翻翻并无作用的同学录；八年前，小学毕业，我得到了第一个没作业的暑假，而且很长很长…那年我有了自己选择初中的权利，我有底气只参加两场考试；七年前，我刚接触新环境，适应住校生活；六年前，我感受到了自己大脑的退化，虽然环境顺利；五年前，我经历了新冠肺炎疫情，打乱了平静的日常，也没能享受几天第二个没有作业的暑假；四年前，我感受到了什么叫做高中的放假，双八事件令人难忘，在竞赛学习中我也认识到了自己的上限；三年前，我不再适应环境，我累了，但又没办法歇下来；两年前，我反正逃出来了，暂且松一口气；一年前，我拿到全院综测第一，仅仅吃过去的老本；现在，我完全没办法跟上天才们的步伐，也不知道自己行将何处。&lt;/p&gt;
&lt;p&gt;我一路走过来，失利很多，因为能力不足而做不到的也很多。我越来越退化，可能并不是从大学才开始。累了就得睡，饿了就得吃。可我现在又累又难以入眠啊。&lt;/p&gt;
&lt;p&gt;我经常信任大家，超过大家信任我。结果总是我感到很受伤，可能是因为我内心比较敏感吧。也可能是因为，我没有一个强大的自我可以依靠，总想靠着他人来补足。&lt;/p&gt;
&lt;p&gt;之前我就想，累了，不想继续了，随便了。但是一时的随便并不能带来一世的轻松。人只会回忆以往的幸福，感慨现在的痛苦。&lt;/p&gt;
&lt;p&gt;这又是谁的问题呢？&lt;/p&gt;
&lt;p&gt;反正都要我去做罢了。&lt;/p&gt;
&lt;p&gt;20年来，我经历了许多，也错过了许多。有时候我会想，如果当初选择了不同的路，现在会不会不一样？但这样的假设毫无意义，因为人生没有如果，只有结果。&lt;/p&gt;
&lt;p&gt;在这个年纪，我开始明白，成长不是一蹴而就的。它是在无数个日日夜夜中，一点一滴积累起来的。那些曾经的失败和挫折，那些难以入眠的夜晚，那些感到无力的时刻，都是成长的一部分。&lt;/p&gt;
&lt;p&gt;我常常觉得自己不够好，不够优秀，不够努力。但也许，这就是20岁的意义所在——认识到自己的不足，却依然选择继续前行。在这个年纪，我们开始真正地认识自己，开始学会与自己的不完美和解。&lt;/p&gt;
&lt;p&gt;未来的路还很长，我不知道自己会走向何方。但我知道，无论选择哪条路，都要对自己负责。也许我永远无法成为最优秀的那个人，但至少，我可以成为最好的自己。&lt;/p&gt;
&lt;p&gt;20岁，是一个新的开始。过去的已经过去，未来的还未到来。现在，我只想好好地活在当下，一步一步地往前走。&lt;/p&gt;
&lt;p&gt;生日快乐，20岁的自己。&lt;/p&gt;
&lt;p&gt;我很庆幸，自己活出了精彩的十年，尽管自己并不能过得像天才们那般精彩。&lt;/p&gt;
&lt;p&gt;至少我感觉，我真的问心无愧啊，不论是谁，不论何事。&lt;/p&gt;
&lt;p&gt;可是，人生能有几个十年呢？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>网络与通信</title>
        <link>https://windclearing.github.io/p/%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1/</link>
        <pubDate>Sun, 02 Mar 2025 01:51:56 +0800</pubDate>
        
        <guid>https://windclearing.github.io/p/%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1/</guid>
        <description>&lt;h1 id=&#34;chapter-1-现代通信及应用概述&#34;&gt;Chapter 1 现代通信及应用概述
&lt;/h1&gt;&lt;h2 id=&#34;通信发展&#34;&gt;通信发展
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;古代通信&lt;/li&gt;
&lt;li&gt;近代通信
电报与电话
无线电通信
广播与电视&lt;/li&gt;
&lt;li&gt;现代通信
彩电，商用卫星，光纤，数字网络，蜂窝电话&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通信&#34;&gt;通信
&lt;/h2&gt;&lt;p&gt;信息的传递与交流。&lt;/p&gt;
&lt;p&gt;$$通信 \begin{cases} 模拟通信  \ 数字通信  \end{cases}$$&lt;/p&gt;
&lt;p&gt;现代通信基本特征是数字化&lt;/p&gt;
&lt;p&gt;瞬时幅值均离散&lt;/p&gt;
&lt;h3 id=&#34;数字通信的优点&#34;&gt;数字通信的优点
&lt;/h3&gt;&lt;p&gt;抗干扰性能好等多条优点&lt;/p&gt;
&lt;p&gt;基础——微电子技术&lt;/p&gt;
&lt;p&gt;核心——计算机基础&lt;/p&gt;
&lt;p&gt;光纤通信基础——光子技术&lt;/p&gt;
&lt;p&gt;卫星通信基础——空间技术&lt;/p&gt;
&lt;h2 id=&#34;信息时代&#34;&gt;信息时代
&lt;/h2&gt;&lt;h2 id=&#34;信息技术与信息化&#34;&gt;信息技术与信息化
&lt;/h2&gt;&lt;h1 id=&#34;chapter-2-信息与信号&#34;&gt;Chapter 2 信息与信号
&lt;/h1&gt;&lt;p&gt;通信的目的：有效、可靠地获取、传递和交换消息钟还所包含的信息&lt;/p&gt;
&lt;h2 id=&#34;信息&#34;&gt;信息？
&lt;/h2&gt;&lt;p&gt;信息是事物运行的状态和方式&lt;/p&gt;
&lt;p&gt;具有特殊性、普遍性、广泛性、时效性和实效性。&lt;/p&gt;
&lt;p&gt;信源-&amp;gt;信道-&amp;gt;信宿&lt;/p&gt;
&lt;p&gt;消息传递是一个不知到知的过程，少到多，不确定到部分确定/全部确定&lt;/p&gt;
&lt;p&gt;信息是事物运动状态或存在方式的不确定性的描述&lt;/p&gt;
&lt;p&gt;消息是表达信息的工具，客体，具体&lt;/p&gt;
&lt;p&gt;通信：消除不确定性，获取信息的过程&lt;/p&gt;
&lt;p&gt;消息：语音、文字……&lt;/p&gt;
&lt;p&gt;信息：消息的有效内容 、&lt;/p&gt;
&lt;p&gt;信号：消息的载体&lt;/p&gt;
&lt;p&gt;完成通信过程所需的电子设备和信道的总体：通信系统&lt;/p&gt;
&lt;h2 id=&#34;信息的度量&#34;&gt;信息的度量
&lt;/h2&gt;&lt;p&gt;不确定性大小的度量&lt;/p&gt;
&lt;p&gt;概率空间用$[X,p(x)]$表示&lt;/p&gt;
&lt;p&gt;离散情况下
$$\begin{bmatrix} X  \ p(x)  \end{bmatrix} = \begin{bmatrix} x_1 &amp;amp; x_2 &amp;amp; &amp;hellip; &amp;amp; x_n  \ p(x_1)  &amp;amp; p(x_2) &amp;amp; &amp;hellip; &amp;amp;p(x_n)\end{bmatrix} $$&lt;/p&gt;
&lt;h3 id=&#34;自信息&#34;&gt;自信息
&lt;/h3&gt;&lt;p&gt;$I = \log _2{[1/P(x)]}$，此时单位为比特（bit）&lt;/p&gt;
&lt;p&gt;概率越大，自信息越小。&lt;/p&gt;
&lt;h3 id=&#34;信息熵&#34;&gt;信息熵
&lt;/h3&gt;&lt;h4 id=&#34;平均信息量&#34;&gt;平均信息量
&lt;/h4&gt;&lt;p&gt;$$H(X) = -\sum_{i = 1} ^ n p(x_i)\log_2 {p(x_i)}$$
离散信源的每一符号等概率出现时，即$P(x_i) = \frac {1}{n}$时，此时熵最大，最大熵为$\log_2 n$(bit/符号)&lt;/p&gt;
&lt;h2 id=&#34;信号&#34;&gt;信号
&lt;/h2&gt;&lt;p&gt;通过消息来表示&lt;/p&gt;
&lt;p&gt;消息的载体，通信系统中传递的是信号&lt;/p&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;确知信号（可用确定时间函数表示）&amp;amp; 随机信号（写不出明确的数学表达式，只知道取某值概率）&lt;/li&gt;
&lt;li&gt;周期信号 &amp;amp; 非周期信号&lt;/li&gt;
&lt;li&gt;模拟信号（时间上连续离散皆可，幅度、频率或相位随信号连续变化）&amp;amp; 数字信号（时间上离散，幅度取值也离散）
A/D, D/A 转换器可以实现数模互相转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一般特性&#34;&gt;一般特性
&lt;/h3&gt;&lt;h4 id=&#34;时域特性&#34;&gt;时域特性
&lt;/h4&gt;&lt;p&gt;信号电压或电流随时间的变化关系&lt;/p&gt;
&lt;h4 id=&#34;频域特性&#34;&gt;频域特性
&lt;/h4&gt;&lt;p&gt;信号频率范围（傅里叶变换后的正弦信号）&lt;/p&gt;
&lt;p&gt;用$F(\omega)$表示时域信号$f(t)$的频谱&lt;/p&gt;
</description>
        </item>
        <item>
        <title>数字逻辑</title>
        <link>https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/</link>
        <pubDate>Mon, 24 Feb 2025 12:20:55 +0800</pubDate>
        
        <guid>https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/</guid>
        <description>&lt;p&gt;第一门计算机硬件课程&lt;br&gt;
晶体管-&amp;gt;计算单元&lt;/p&gt;
&lt;h1 id=&#34;一数字系统&#34;&gt;一、数字系统
&lt;/h1&gt;&lt;h2 id=&#34;定义&#34;&gt;定义
&lt;/h2&gt;&lt;h3 id=&#34;数字系统&#34;&gt;数字系统？
&lt;/h3&gt;&lt;p&gt;一种&lt;strong&gt;离散信息处理系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;离散输入-&amp;gt;离散输出（有系统状态）&lt;/p&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类
&lt;/h3&gt;&lt;h4 id=&#34;是否有系统状态&#34;&gt;是否有系统状态
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;组合逻辑系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无状态记忆功能&lt;/li&gt;
&lt;li&gt;输出值只与当时系统输入有关
$$
output= f(input)
$$
&lt;strong&gt;时序逻辑功能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有状态记忆功能&lt;/li&gt;
&lt;li&gt;与输入状态都有关
$$
output = f(state, input)
$$&lt;/li&gt;
&lt;li&gt;在离散时间点更新状态为&lt;strong&gt;同步时序系统&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在任何时间点更新状态是&lt;strong&gt;异步时序系统&lt;/strong&gt;(理论上存在但少，难设计把控)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;典型系统&#34;&gt;典型系统
&lt;/h3&gt;&lt;h4 id=&#34;数字计数器&#34;&gt;数字计数器
&lt;/h4&gt;&lt;p&gt;输入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+1&lt;/li&gt;
&lt;li&gt;重置&lt;br&gt;
状态：&lt;/li&gt;
&lt;li&gt;存储数字值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是时序逻辑电路&lt;/p&gt;
&lt;h4 id=&#34;数字计算机&#34;&gt;数字计算机
&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;存储器&amp;lt;--&amp;gt;CPU(控制单元&amp;lt;--&amp;gt;数据通道)&amp;lt;--&amp;gt;IO
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;嵌入式系统&#34;&gt;嵌入式系统
&lt;/h4&gt;&lt;p&gt;计算机作为其他系统的内部部件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微型计算机&lt;/li&gt;
&lt;li&gt;微型控制器&lt;/li&gt;
&lt;li&gt;数字信号处理器&lt;br&gt;
e.g. 测温&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二信息表示&#34;&gt;二、信息表示
&lt;/h1&gt;&lt;h2 id=&#34;定义-1&#34;&gt;定义
&lt;/h2&gt;&lt;h3 id=&#34;信息&#34;&gt;信息
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;存在&lt;strong&gt;现象的表示&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;消除&lt;strong&gt;不确定性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;信息熵&lt;/li&gt;
&lt;li&gt;熵增定律&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;信号&#34;&gt;信号
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;信息表示的&lt;strong&gt;物理载体&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模拟信号&lt;/strong&gt;：连续的物理量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数字信号&lt;/strong&gt;：离散的物理量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二进制&#34;&gt;二进制
&lt;/h2&gt;&lt;p&gt;可以用不同物理量实现，
比如电路的信号&lt;/p&gt;
&lt;h2 id=&#34;数制&#34;&gt;数制
&lt;/h2&gt;&lt;h3 id=&#34;定义-2&#34;&gt;定义
&lt;/h3&gt;&lt;p&gt;数的表示规则称为&lt;strong&gt;数制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基底(r)&lt;/strong&gt;：一个数制所包含的数符号的个数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;权&lt;/strong&gt;：数字符号的位置决定的值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;值&lt;/strong&gt;($r^i$)是各位数字值与其权之积的总和&lt;/p&gt;
&lt;p&gt;B, O/Q, D, H&lt;/p&gt;
&lt;p&gt;2, 8, 10, 16 进制&lt;/p&gt;
&lt;h4 id=&#34;二进制单位&#34;&gt;二进制单位
&lt;/h4&gt;&lt;p&gt;$2^{10}$ = K&lt;br&gt;
$2^{20}$ = M&lt;br&gt;
$2^{30}$ = G&lt;br&gt;
$2^{40}$ = T&lt;/p&gt;
&lt;h4 id=&#34;运算&#34;&gt;运算
&lt;/h4&gt;&lt;p&gt;2进制：类似十进制&lt;br&gt;
8，16进制加减乘：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将同一列对应位转换为十进制&lt;/li&gt;
&lt;li&gt;计算完后再转换为原进制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;转换&#34;&gt;转换
&lt;/h4&gt;&lt;p&gt;非十进制-&amp;gt;十进制：按权展开
非十进制互相转换：二进制
十进制-&amp;gt;非十进制：整数部分除r取余，小数部分乘r取整&lt;/p&gt;
&lt;h1 id=&#34;编码&#34;&gt;编码
&lt;/h1&gt;&lt;h2 id=&#34;二进制编码&#34;&gt;二进制编码
&lt;/h2&gt;&lt;p&gt;0，1排列&lt;br&gt;
$2^n$ 个数据&lt;/p&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;数据类型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数值型：能进行算术运算，整数，小数&lt;/li&gt;
&lt;li&gt;非数值型：不需算术，字符，控制符
M个数据需要&lt;strong&gt;二进制位数&lt;/strong&gt;$\lceil log_2(M)\rceil$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bcd码&#34;&gt;BCD码
&lt;/h2&gt;&lt;p&gt;二进制编码&lt;strong&gt;十进制数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4位二进制表达0-9，6个冗余&lt;/li&gt;
&lt;li&gt;8421码&lt;/li&gt;
&lt;li&gt;最简单，最直觉&lt;/li&gt;
&lt;li&gt;加权码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;格雷码&#34;&gt;格雷码
&lt;/h2&gt;&lt;p&gt;计数过程中，相邻编码之间只有一位不同&lt;br&gt;
不唯一&lt;/p&gt;
&lt;h3 id=&#34;特点&#34;&gt;特点
&lt;/h3&gt;&lt;p&gt;计数电路中，位翻转&lt;strong&gt;次数少，功耗低&lt;/strong&gt;&lt;br&gt;
光学轴角编码器转动中，避免错误编码&lt;br&gt;
&lt;img src=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/p1-gray.png&#34;
	width=&#34;1631&#34;
	height=&#34;707&#34;
	srcset=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/p1-gray_hu_1c40d1489b6ea449.png 480w, https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/p1-gray_hu_11e246b16113cd72.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;光学轴角编码器图示&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;553px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;编制n偶数位二进制计数序列&#34;&gt;编制n（偶数）位二进制计数序列
&lt;/h3&gt;&lt;p&gt;前一半左最高为0，往右是左邻位的偶校验&lt;br&gt;
后一半前一位逆序排列，左一位为1&lt;/p&gt;
&lt;h3 id=&#34;自动编制算法递归&#34;&gt;自动编制算法（递归）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1位格雷码两个码字：0，1&lt;/li&gt;
&lt;li&gt;n+1 位格雷码 = n位&lt;strong&gt;顺序&lt;/strong&gt;格雷码加前缀&lt;strong&gt;0&lt;/strong&gt;+n位&lt;strong&gt;逆序&lt;/strong&gt;格雷码加前缀&lt;strong&gt;1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字符编码&#34;&gt;字符编码
&lt;/h2&gt;&lt;h3 id=&#34;ascii码&#34;&gt;ASCII码
&lt;/h3&gt;&lt;p&gt;美国信息交换标准编码&lt;/p&gt;
&lt;p&gt;128个字符&lt;/p&gt;
&lt;h3 id=&#34;unicode&#34;&gt;Unicode
&lt;/h3&gt;&lt;p&gt;万国码、统一码
所有语言 中的字符与文字
对字符规定了唯一代码点， U+0030 表示0
不同方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UTF-8：1~4字节，与ASCII兼容
&lt;img src=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-1.png&#34;
	width=&#34;1697&#34;
	height=&#34;879&#34;
	srcset=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-1_hu_7493def0acf7b651.png 480w, https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-1_hu_6edc96bccee4cb27.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2-1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;193&#34;
		data-flex-basis=&#34;463px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTF-16：2或4字节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTF-32：4字节&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;校验位&#34;&gt;校验位
&lt;/h3&gt;&lt;p&gt;检测数据传输中可能存在的错误&lt;/p&gt;
&lt;p&gt;增加1位：表示编码中&lt;code&gt;1&lt;/code&gt;的个数是奇数还是偶数&lt;/p&gt;
&lt;p&gt;无法确定偶数位，无法检测偶数个位出错（概率小）&lt;/p&gt;
&lt;p&gt;奇校验位：奇数个&lt;code&gt;1&lt;/code&gt;为 0；偶校验反之。&lt;/p&gt;
&lt;h1 id=&#34;二布尔代数&#34;&gt;二、布尔代数
&lt;/h1&gt;&lt;h2 id=&#34;二值逻辑&#34;&gt;二值逻辑
&lt;/h2&gt;&lt;p&gt;定义：描述&lt;strong&gt;二值变量&lt;/strong&gt;以及对其施加的&lt;strong&gt;逻辑运算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;变量取值为0或1&lt;/p&gt;
&lt;p&gt;基本逻辑运算：与或非&lt;/p&gt;
&lt;p&gt;类似二进制计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与和乘&lt;/li&gt;
&lt;li&gt;或和加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;真值表&lt;/p&gt;
&lt;h2 id=&#34;逻辑门&#34;&gt;逻辑门
&lt;/h2&gt;&lt;h3 id=&#34;定义-3&#34;&gt;定义
&lt;/h3&gt;&lt;p&gt;处理一个或多个输入，产生一个输出信号电子电路&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-2.png&#34;
	width=&#34;1437&#34;
	height=&#34;880&#34;
	srcset=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-2_hu_24c96e7ddf97e954.png 480w, https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-2_hu_9c685487f81ef135.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2-2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;163&#34;
		data-flex-basis=&#34;391px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;定时图&#34;&gt;定时图
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-3.png&#34;
	width=&#34;1601&#34;
	height=&#34;1009&#34;
	srcset=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-3_hu_bdea06c43881bd6a.png 480w, https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-3_hu_a947ad8114d81cd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2-3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;380px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;延时&#34;&gt;延时
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-4.png&#34;
	width=&#34;1577&#34;
	height=&#34;1126&#34;
	srcset=&#34;https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-4_hu_f3da587d8b43d378.png 480w, https://windclearing.github.io/p/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/2-4_hu_33d3f02552bad9c0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2-4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他门&#34;&gt;其他门
&lt;/h3&gt;&lt;p&gt;与非、或非、异或等&lt;/p&gt;
&lt;h2 id=&#34;布尔代数&#34;&gt;布尔代数
&lt;/h2&gt;&lt;h3 id=&#34;定义-4&#34;&gt;定义
&lt;/h3&gt;&lt;p&gt;布尔代数是处理二进制变量和逻辑运算的代数方法&lt;/p&gt;
&lt;p&gt;布尔表达式是由二进制变量，常量0和1，逻辑运算符和括号组成的代数运算式
$$D\bar X + A$$&lt;/p&gt;
&lt;p&gt;布尔函数是一个布尔等式，由函数变量、等号和布尔表达式组成：
$$L(D,X,A) = D\bar X + A$$
布尔函数，真值表，逻辑电路图三者等价，仅&lt;/p&gt;
&lt;h3 id=&#34;恒等式&#34;&gt;恒等式
&lt;/h3&gt;&lt;h4 id=&#34;对偶原则&#34;&gt;对偶原则
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;0和1对偶&lt;/li&gt;
&lt;li&gt;与和或对偶&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此处应有17个公式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;德摩根定理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与的非等于非的或，或的非等于非的与&lt;/p&gt;
&lt;h4 id=&#34;代数运算&#34;&gt;代数运算
&lt;/h4&gt;&lt;p&gt;利用代数性质对布尔函数化简，可简化电路&lt;/p&gt;
&lt;h4 id=&#34;反函数&#34;&gt;反函数
&lt;/h4&gt;&lt;p&gt;F的反函数：真值表中将F值把1和0互换&lt;/p&gt;
&lt;p&gt;函数取反方法：德摩根定理/对偶式+变量取反&lt;/p&gt;
&lt;h4 id=&#34;标准形式&#34;&gt;标准形式
&lt;/h4&gt;&lt;h5 id=&#34;最小项和最大项&#34;&gt;最小项和最大项
&lt;/h5&gt;&lt;p&gt;所有变量以原变量或反变量按序出现，这样的乘积项叫做&lt;strong&gt;最小项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;n个变量，共有$2^n$个不同的最小项&lt;/p&gt;
&lt;p&gt;对应变量的1个组合。对该变量组合最小项为1&lt;/p&gt;
&lt;p&gt;变量组合对应的二进制值为最小项序号&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;所有变量以原变量或反变量按序出现，这样的求和项叫做&lt;strong&gt;最大项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;n个变量，共有$2^n$个不同的最大项&lt;/p&gt;
&lt;p&gt;对应变量的1个组合。对该变量组合最大项为0&lt;/p&gt;
&lt;p&gt;变量组合对应的二进制值为最大项序号&lt;/p&gt;
&lt;h5 id=&#34;最小项之和和最大项之积&#34;&gt;最小项之和和最大项之积
&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;最小项之和&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;真值表中所有函数取值为1的最小项之和&lt;/p&gt;
&lt;p&gt;$$F = \bar X \bar Y \bar Z + \bar X Y\bar Z + X\bar Y Z +XYZ=m_0 +m_2+m_5+m_7$$
缩写
$$F(X,Y,Z) =\sum m(0,2,5,7)$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大项之积&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;真值表中所有函数取值为0的最大项之积&lt;/p&gt;
&lt;p&gt;也可反函数最小项之和取反得到&lt;/p&gt;
&lt;p&gt;$$F = \overline{m_1+m_3+m_4+m_6} = \bar m_1 \cdot \bar m_3 \cdot \bar m_4 \cdot \bar m_6= M_1\cdot M_3 \cdot M_4 \cdot M_6 = (X+Y+\bar Z)(X+\bar Y + \bar Z)(\bar X + Y + Z)(\bar X + \bar Y + Z)$$
$$F(X,Y,Z)=\prod M(1,3,4,6)$$&lt;/p&gt;
&lt;h5 id=&#34;积之和和和之积&#34;&gt;积之和和和之积
&lt;/h5&gt;&lt;p&gt;积之和&lt;br&gt;
先与门后或门
和之积&lt;br&gt;
先或门后与门&lt;/p&gt;
&lt;p&gt;均为两级电路&lt;/p&gt;
&lt;p&gt;不同的标准形公式复杂度不同&lt;/p&gt;
&lt;p&gt;对应不同的电路实现&lt;/p&gt;
&lt;h4 id=&#34;卡诺图&#34;&gt;卡诺图
&lt;/h4&gt;&lt;h5 id=&#34;成本标准&#34;&gt;成本标准
&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;成本标准&lt;/strong&gt;：衡量电路复杂度，优化目标&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文字成本&lt;/strong&gt;：逻辑图对应的表达式中文字个数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;门输入成本（G）&lt;/strong&gt;：逻辑图中门的输入端个数，不算非门&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;带非门的门输入成本（GN）&lt;/strong&gt;：逻辑图中门的输入端个数，算非门&lt;/p&gt;
&lt;h1 id=&#34;chapter-3--组合逻辑电路分析与设计&#34;&gt;Chapter 3  组合逻辑电路分析与设计
&lt;/h1&gt;&lt;p&gt;一个组合逻辑电路由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m个布尔输入&lt;/li&gt;
&lt;li&gt;n个布尔输出&lt;/li&gt;
&lt;li&gt;n个转换函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构成&lt;/p&gt;
&lt;h2 id=&#34;组合逻辑电路的设计过程&#34;&gt;组合逻辑电路的设计过程
&lt;/h2&gt;&lt;p&gt;设计过程分为五步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;规范化——指定组合电路行为&lt;/li&gt;
&lt;li&gt;形式化——用真值表对输入输出形式化&lt;/li&gt;
&lt;li&gt;优化——优化逻辑，减少门输入成本，如卡诺图优化&lt;/li&gt;
&lt;li&gt;工艺映射——将优化后逻辑映射到实现工艺&lt;/li&gt;
&lt;li&gt;验证——验证设计正确性&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;规范化&#34;&gt;规范化
&lt;/h3&gt;&lt;p&gt;确定输入输出范围&lt;/p&gt;
&lt;h3 id=&#34;形式化&#34;&gt;形式化
&lt;/h3&gt;&lt;p&gt;得出真值表或者布尔函数&lt;/p&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化
&lt;/h3&gt;&lt;p&gt;用卡诺图优化，降低门输入成本&lt;/p&gt;
&lt;p&gt;例子：由该真值表&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220406224405966.png&#34; alt=&#34;image-20220406224405966&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;得出了4个卡诺图：&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220406224419400.png&#34; alt=&#34;image-20220406224419400&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后化简得到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$W=A+BC+BD$&lt;/li&gt;
&lt;li&gt;$X=\overline BC+\overline BD+B\overline C\overline D$&lt;/li&gt;
&lt;li&gt;$Y=CD+\overline C\overline D$&lt;/li&gt;
&lt;li&gt;$Z=\overline D$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以通过&lt;strong&gt;共享电路&lt;/strong&gt;进行进一步优化，如令$\overline C\overline D=\overline{C+D}=\overline T$，则有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$W=A+BT$&lt;/li&gt;
&lt;li&gt;$X=\overline BT+T\overline B$&lt;/li&gt;
&lt;li&gt;$Y=CD+\overline T$&lt;/li&gt;
&lt;li&gt;$Z=\overline D$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后得到下图所示电路：&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220406224459049.png&#34; alt=&#34;image-20220406224459049&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;工艺映射&#34;&gt;工艺映射
&lt;/h3&gt;&lt;p&gt;通过连结词完备集将电路用一种或两种门表示出来&lt;/p&gt;
&lt;p&gt;映射过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用与非门/或非门替换掉与门和或门&lt;/p&gt;
&lt;p&gt;与非门&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220606074709377.png&#34; alt=&#34;image-20220606074709377&#34; style=&#34;zoom:80%;&#34; /&gt;或非门&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220606074816158.png&#34; alt=&#34;image-20220606074816158&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将反相器推过电路中的&lt;strong&gt;扇出点&lt;/strong&gt;，其实就是一个变量不要用多个非门&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抵消掉反相器对&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复2和3直到在a和b之间&lt;strong&gt;只存在1个反相器&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电路输入或或非门的输出&lt;/li&gt;
&lt;li&gt;或非门输入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;验证&#34;&gt;验证
&lt;/h3&gt;&lt;p&gt;人工逻辑验证或者模拟验证&lt;/p&gt;
&lt;h2 id=&#34;组合逻辑功能模块&#34;&gt;组合逻辑功能模块
&lt;/h2&gt;&lt;h3 id=&#34;组合功能模块&#34;&gt;组合功能模块
&lt;/h3&gt;&lt;p&gt;在电路设计中经常使用的公共模块，每个功能模块对应一个组合电路实现。&lt;/p&gt;
&lt;h3 id=&#34;基本逻辑函数&#34;&gt;基本逻辑函数
&lt;/h3&gt;&lt;h4 id=&#34;单变量函数&#34;&gt;单变量函数
&lt;/h4&gt;&lt;p&gt;一个变量X的函数，可在输入处作功能块&lt;/p&gt;
&lt;h4 id=&#34;多位函数&#34;&gt;多位函数
&lt;/h4&gt;&lt;p&gt;一位函数的向量；粗线代表&lt;strong&gt;总线&lt;/strong&gt;，是一个&lt;strong&gt;向量信号&lt;/strong&gt;；可以从总线中分割出一个位子集。&lt;/p&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220406224555482.png&#34; alt=&#34;image-20220406224555482&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;使能函数&#34;&gt;使能函数
&lt;/h4&gt;&lt;p&gt;是否允许函数从输入传递到到输出&lt;/p&gt;
&lt;p&gt;引入&lt;strong&gt;使能信号EN&lt;/strong&gt;。EN为1时允许，为0时不允许并输出一个==固定的信号值==，可能为0可能为1。&lt;/p&gt;
&lt;h3 id=&#34;译码与编码&#34;&gt;译码与编码
&lt;/h3&gt;&lt;p&gt;译码：输入n位，输出m位，其中$n\le m\le 2^n$&lt;/p&gt;
&lt;p&gt;编码：输入最大m位，输出n位，其中$n\le m\le 2^n$&lt;/p&gt;
&lt;p&gt;译码与编码互逆&lt;/p&gt;
&lt;h3 id=&#34;译码器&#34;&gt;译码器
&lt;/h3&gt;&lt;p&gt;实现译码功能的电路&lt;/p&gt;
&lt;p&gt;译码有n位输入m位输出，&lt;/p&gt;
&lt;h4 id=&#34;1-2译码器&#34;&gt;1-2译码器
&lt;/h4&gt;&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220406224621853.png&#34; alt=&#34;image-20220406224621853&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;h4 id=&#34;2-4译码器&#34;&gt;2-4译码器
&lt;/h4&gt;&lt;p&gt;简单的来讲，2-4译码器可以由两个1-2译码器加上4个与门（作用于四种输出）构成&lt;/p&gt;
&lt;h4 id=&#34;n-2n译码器&#34;&gt;n-$2^n$译码器
&lt;/h4&gt;&lt;p&gt;需要$2^n$个与门，其中每个与门和两个译码器连接，这两个译码器的输入相等或者只相差1，并且输入之和为n。不断展开，直到展开到1-2译码器&lt;/p&gt;
&lt;p&gt;通过修改$n-2^n$译码器，可以得到$n-m$译码器，如7-128译码器可以由3-8译码器和4-16译码器和128个与门构成。&lt;/p&gt;
&lt;h4 id=&#34;带使能的译码器&#34;&gt;带使能的译码器
&lt;/h4&gt;&lt;p&gt;电路输出增加==使能信号-EN==，并且$n-2^n$译码器再增加$2^n$个输出与门以结合使能：&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220606082357317.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220606082357317&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;当EN为0时，$A_0,A_1$变为X，X可以表示0或者1&lt;/p&gt;
&lt;p&gt;此时相当于EN为输入信号，$A_0,A_1$为输出端==选择信号==&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220606082551659.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220606082551659&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;基于译码器的组合电路设计&#34;&gt;基于译码器的组合电路设计
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现1个函数，其中有n个变量&lt;/li&gt;
&lt;li&gt;一个$n-2^n$译码器，译码器输出对应最小项 ；1个或门，将最小项或起来（最小项之和）&lt;/li&gt;
&lt;li&gt;简单来说，n个输入能输出所有的最小项或者最大项；将所有最小项和起来或者最大项或起来就能得到最后的电路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是直接通过译码器得到组合电路，就相当于没有用卡诺图把最小项之和优化成积之和，==门输入成本太高==&lt;/p&gt;
&lt;h3 id=&#34;编码器&#34;&gt;编码器
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;十进制——BCD编码器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入: 10位代表从0到9，($D_0, …, D_9$)&lt;/li&gt;
&lt;li&gt;输出: 4位BCD码&lt;/li&gt;
&lt;li&gt;函数: 若输入位 Di 是1, 则输出($A_3, A_2, A_1, A_0$) 是i的BCD码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤：真值表$\to$卡诺图优化$\to$优化&lt;/p&gt;
&lt;p&gt;有布尔方程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$A_3=D_8+D_9$&lt;/li&gt;
&lt;li&gt;$A_2=D_4+D_5+D_6+D_7$&lt;/li&gt;
&lt;li&gt;$A_1=D_2+D_3+D_6+D_7$&lt;/li&gt;
&lt;li&gt;$A_0=D_1+D_3+D_5+D_7+D_9$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是如果输入有不止一个1，该编码器就无法工作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优先编码器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面以五输入十进制-BCD编码器为例讲解如何解决这个问题&lt;/p&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220406225314022.png&#34; alt=&#34;image-20220406225314022&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;显然该编码器只人他看到的“第一个1”，后面的不管，然后输出对应BCD码&lt;/p&gt;
&lt;p&gt;也就是说，D4的优先级最高，D3次之，D0优先级最低&lt;/p&gt;
&lt;h3 id=&#34;选择和复用器&#34;&gt;选择和复用器
&lt;/h3&gt;&lt;h4 id=&#34;多路复用器&#34;&gt;多路复用器
&lt;/h4&gt;&lt;p&gt;多路复用器是执行选择的逻辑电路，输入输出如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入：一组待选择的数据，最多$2^n$个($I_0&amp;hellip;I_{2^n}$);
一组用来进行选择的选择信号n个($S_{n-1}&amp;hellip;S_0$)&lt;/li&gt;
&lt;li&gt;输出：一个输出$Y$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;多路复用器通过改变选择信号S，就可以实现对带选择的数据I的选择输出&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;2-1多路复用器&lt;/p&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220406225408107.png&#34; alt=&#34;image-20220406225408107&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;p&gt;当$S=0$时，输出$I_0$；当$S=1$时，输出$I_1$&lt;/p&gt;
&lt;p&gt;实际上，该多路复用器由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个1-2译码器&lt;/li&gt;
&lt;li&gt;两个使能信号&lt;/li&gt;
&lt;li&gt;2-输入或门&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;组成，由此可以得出下列的多路复用器&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$2^n-1$多路复用器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个$n-2^n$译码器&lt;/li&gt;
&lt;li&gt;$2^n$个使能信号&lt;/li&gt;
&lt;li&gt;$2^n$-输入或门&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组成。其中$2^n$个使能信号和$2^n$个输入或门看作==$2^n\times2$个与或门==&lt;/p&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220609113519246.png&#34; alt=&#34;image-20220609113519246&#34; style=&#34;zoom:33%;&#34; /&gt;
&lt;h4 id=&#34;位宽展开&#34;&gt;位宽展开
&lt;/h4&gt;&lt;p&gt;上面所说的多路复用器的输入都是==单个位==，多位的多路复用器输入采用==位向量==&lt;/p&gt;
&lt;p&gt;也就是说n位的多路复用器要实现n个函数，有n个输出；在译码器之后要平行地使用n个$2^n\times2$个与或门&lt;/p&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220609113326874.png&#34; alt=&#34;image-20220609113326874&#34; style=&#34;zoom: 33%;&#34; /&gt;
&lt;h3 id=&#34;基于复用器的组合电路&#34;&gt;基于复用器的组合电路
&lt;/h3&gt;&lt;p&gt;实现&lt;strong&gt;m个函数&lt;/strong&gt;，包含n个变量&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;m位宽$2^n-1$多路复用器&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;得到函数真值表&lt;/li&gt;
&lt;li&gt;根据真值表进行如下操作&lt;/li&gt;
&lt;li&gt;将函数输入$S_n - 1 , … , S_0$ 作为选择信号&lt;/li&gt;
&lt;li&gt;真值表中的值作为多路复用器的待选择数据&lt;/li&gt;
&lt;li&gt;将多路复用器的输出标识成函数输出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子，格雷码到二进制码的转换：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;重新排列真值表使输入按==计数顺序==&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220606095838498.png&#34; alt=&#34;image-20220606095838498&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;y和z通过一个双位8-1多路复用器实现：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A，B，C连到选择信号；y和z连到输出信号，各自的真值连到待选择数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;imgs/image-20220606100005277.png&#34; alt=&#34;image-20220606100005277&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220606100012775.png&#34; alt=&#34;image-20220606100012775&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;m位宽的==$2^{n-1}-1$==多路复用器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先得到函数的真值表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重排真值表&lt;/strong&gt;，使得输入按照计数升序&lt;/li&gt;
&lt;li&gt;基于n-1个变量值，将真值表中的==行配对==，其中n-1个变量一致&lt;/li&gt;
&lt;li&gt;设剩下的变量为$X$&lt;/li&gt;
&lt;li&gt;每一配对中，将输出表达成$(0, 1, X, \overline X)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据真值表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将n-1个变量作为选择信号&lt;/li&gt;
&lt;li&gt;$(0, 1, X, \overline X)$作为待选择数据&lt;/li&gt;
&lt;li&gt;将多路复用器的输出标识成函数输出&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220408170719655.png&#34; alt=&#34;image-20220408170719655&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;行配对&lt;/strong&gt;：在上图右侧的多路复用器中,我们可以看到:对于某个AB的组合,Z的值仅由C决定.所以行配对就是要得出AB相同时的函数输出与C的关系,以构建最终的多路复用器.&lt;/p&gt;
&lt;h2 id=&#34;算术功能模块&#34;&gt;算术功能模块
&lt;/h2&gt;&lt;h3 id=&#34;迭代组合电路&#34;&gt;迭代组合电路
&lt;/h3&gt;&lt;p&gt;基本思想：利用规律性来简化设计&lt;/p&gt;
&lt;p&gt;在实现算数功能时，一般是对二进制向量进行操作，对向量中的每一位进行&lt;strong&gt;同样&lt;/strong&gt;的子函数操作&lt;/p&gt;
&lt;p&gt;所以可以重复使用一些功能&lt;/p&gt;
&lt;p&gt;单元：子函数模块&lt;/p&gt;
&lt;p&gt;迭代阵列：相互连接的单元的阵列&lt;/p&gt;
&lt;h3 id=&#34;二进制加法器&#34;&gt;二进制加法器
&lt;/h3&gt;&lt;h4 id=&#34;半加器&#34;&gt;半加器
&lt;/h4&gt;&lt;p&gt;输入：X，Y&lt;/p&gt;
&lt;p&gt;输出：和位S，进位C&lt;/p&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220408172314531.png&#34; alt=&#34;image-20220408172314531&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;公式：$S=X\oplus Y$，$C=X·Y$&lt;/p&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220408172420642.png&#34; alt=&#34;image-20220408172420642&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;h4 id=&#34;全加器&#34;&gt;全加器
&lt;/h4&gt;&lt;p&gt;输入：X，Y，进位Z&lt;/p&gt;
&lt;p&gt;输出：和位S，进位C&lt;/p&gt;
&lt;p&gt;真值表：&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220408172837898.png&#34; alt=&#34;image-20220408172837898&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公式：$S=X\oplus Y\oplus Z$，$C=XY+(X\oplus Y)Z$&lt;/p&gt;
&lt;p&gt;电路图：&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220606110933459.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220606110933459&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;实际上全加器由两个半加器和一个或门组成&lt;/p&gt;
&lt;h4 id=&#34;4位行波进位加法器&#34;&gt;4位行波进位加法器
&lt;/h4&gt;&lt;p&gt;单元是1位全加法器&lt;/p&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220408173847424.png&#34; alt=&#34;image-20220408173847424&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;h3 id=&#34;二进制加减法器&#34;&gt;二进制加减法器
&lt;/h3&gt;&lt;p&gt;按照补码的加法执行&lt;/p&gt;
&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220408173921602.png&#34; alt=&#34;image-20220408173921602&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;当S=1时，对B按位取反（反码），$C_0=1$使得B变成补码（反码+1）。注意，最终计算得到的结果如果==没有产生进位==，那么需要对结果==求补并添加负号==；如果产生进位则计算结果就是真实结果，进位不用管他。&lt;/p&gt;
&lt;p&gt;当S=0时，等同于二进制加法&lt;/p&gt;
&lt;h3 id=&#34;有符号的二进制加减法&#34;&gt;有符号的二进制加减法
&lt;/h3&gt;&lt;h4 id=&#34;负数的合理表示&#34;&gt;负数的合理表示
&lt;/h4&gt;&lt;p&gt;在二进制加减法器中我们发现，减法在该电路模块中还没有完全完成，还需要根据是否有进位来进行校正；并且上面的加减法器只适用于无符号数加减。为解决这一问题，需要引进新的负数表示方法：==符号-二进制补码表示法==。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;符号-二进制补码表示法&lt;/strong&gt;：==负数用其绝对值的补码来表示，包括绝对值的符号位0==&lt;/p&gt;
&lt;h4 id=&#34;有符号的二进制加法&#34;&gt;有符号的二进制加法
&lt;/h4&gt;&lt;p&gt;用补码表示负数的两个有符号二进制数的加法运算，只需要将其包含符号位在内的两个数相加，然后丢弃进位&lt;/p&gt;
&lt;h4 id=&#34;有符号的二进制减法&#34;&gt;有符号的二进制减法
&lt;/h4&gt;&lt;p&gt;用补码表示负数的两个有符号二进制数的减法运算，对减数取补，再将其与被减数相加，然后丢弃进位&lt;/p&gt;
&lt;p&gt;所以，只要采用&lt;strong&gt;符号-二进制补码表示法&lt;/strong&gt;，上面的二进制加减法器的电路仍然可以正常使用，而此时不需要在进行计算后的校正操作&lt;/p&gt;
&lt;h3 id=&#34;溢出&#34;&gt;溢出
&lt;/h3&gt;&lt;p&gt;溢出：两个n位数产生的结果需要用n+1位数保存，那么称其发生了溢出&lt;/p&gt;
&lt;h4 id=&#34;溢出检测&#34;&gt;溢出检测
&lt;/h4&gt;&lt;p&gt;如果&lt;strong&gt;符号位的进位输入与进位输出&lt;/strong&gt;不相等，那么发生了溢出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lbw-img-lbw.oss-cn-beijing.aliyuncs.com/img/image-20220615101058122.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220615101058122&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;压缩&#34;&gt;压缩
&lt;/h3&gt;&lt;p&gt;从一个基本电路（如二进制加法器或乘法器）出发，将已有的电路转换成有用的、较简单的电路来简化设计，从而代替直接设计电路。针对特定应用将已有电路简化成一个简单电路，我们称这个过程为==压缩==&lt;/p&gt;
&lt;p&gt;对于已经设计好的功能块，通过将其输入端的值固定、传递和取反，即可实现新的功能&lt;/p&gt;
&lt;h3 id=&#34;递增递减&#34;&gt;递增/递减
&lt;/h3&gt;&lt;p&gt;由加减法器压缩可得&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Kotlin学习</title>
        <link>https://windclearing.github.io/p/kotlin%E5%AD%A6%E4%B9%A0/</link>
        <pubDate>Wed, 19 Feb 2025 21:06:33 +0800</pubDate>
        
        <guid>https://windclearing.github.io/p/kotlin%E5%AD%A6%E4%B9%A0/</guid>
        <description>&lt;h1 id=&#34;从零开始认识一门新语言-kotlin&#34;&gt;从零开始认识一门新语言-kotlin
&lt;/h1&gt;&lt;h2 id=&#34;序言&#34;&gt;序言
&lt;/h2&gt;&lt;p&gt;这学期选了一门专业选修课《Android技术开发基础》，老师已经提前在群里要求掌握kotlin语法了qaq&lt;br&gt;
对于我这种大一C语言都没学会多少的基础不好的同学来说，没有面向对象基础就选修这门课显然无异于自寻死路&lt;br&gt;
不过在Android平台上开发一些小应用也是我之前想学习去做的一件事情&lt;br&gt;
正好这学期不怎么在乎绩点了（反正早就寄了&lt;br&gt;
希望学习顺利！&lt;/p&gt;
&lt;h2 id=&#34;初步了解kotlin&#34;&gt;初步了解kotlin
&lt;/h2&gt;&lt;p&gt;kotlin似乎是脱胎于java的一个Google目前在Android开发中主推的语言。可惜我没有任何java或者面向对象的基础=_=&lt;br&gt;&lt;/p&gt;
&lt;p&gt;似乎还完全兼容java(?&lt;/p&gt;
&lt;h2 id=&#34;环境配置&#34;&gt;环境配置
&lt;/h2&gt;&lt;p&gt;我下载了&lt;strong&gt;IntelliJ IDEA&lt;/strong&gt;社区版，由于对英文的不熟悉，一直没能找到汉语插件，最后发现目前的设置已经可以直接切换语言为中文。。。
似乎没有遇到什么其他疑难问题。&lt;/p&gt;
&lt;h2 id=&#34;hello-world&#34;&gt;Hello World
&lt;/h2&gt;&lt;p&gt;新建项目后自动生成了代码，看上去很简单，有点像python（我怎么还没学python&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fun main() {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    println(&amp;#34;Hello World!&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;似乎没什么问题。&lt;/p&gt;
&lt;h2 id=&#34;基础语法&#34;&gt;基础语法
&lt;/h2&gt;&lt;p&gt;翻阅官方文档，我找到了Jetbrain的免费课程，开始学习基础语法(写一些认为自己不太清楚的部分)&lt;/p&gt;
&lt;h3 id=&#34;basic-literals-numbers-strings-and-characters-整数字符和字符串&#34;&gt;Basic literals: numbers, strings and characters 整数，字符和字符串
&lt;/h3&gt;&lt;h4 id=&#34;整数&#34;&gt;整数
&lt;/h4&gt;&lt;p&gt;整数可以用下划线分块，下划线不能在开头结尾&lt;/p&gt;
&lt;h4 id=&#34;字符字符串&#34;&gt;字符&amp;amp;字符串
&lt;/h4&gt;&lt;p&gt;与C语言表示相同&lt;/p&gt;
&lt;h3 id=&#34;values-and-variables--值和变量&#34;&gt;Values and variables  值和变量
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;val&lt;/code&gt;(value) 声明一个只读变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;(variable) 声明一个可变变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;(with val) 用于编译时已知的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    val language = &amp;#34;kotlin&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;val&lt;/code&gt; 不可变，可读性更强，尽可能使用 &lt;code&gt;val&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;val&lt;/code&gt; 可以赋值给 &lt;code&gt;var&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;常量不能直接被赋值修改，但是可以通过其他方式修改内容。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;val&lt;/code&gt; 与&lt;strong&gt;Java&lt;/strong&gt;中的&lt;code&gt;final&lt;/code&gt;相似：都禁止为变量重新赋值，但允许更改对象的内部状态。&lt;/p&gt;
&lt;p&gt;但是&lt;code&gt;const val&lt;/code&gt;不太行。&lt;/p&gt;
&lt;p&gt;变量命名法建议采用驼峰命名法&lt;strong&gt;camelCase&lt;/strong&gt;：从第二个单词开始每词首字母大写。&lt;/p&gt;
&lt;p&gt;而对于&lt;code&gt;const val&lt;/code&gt;声明的常量，Kotlin 社区通常建议使用&lt;strong&gt;全大写字母&lt;/strong&gt;，单词之间用 下划线分隔。&lt;/p&gt;
&lt;h3 id=&#34;data-types--数据类型&#34;&gt;Data types  数据类型
&lt;/h3&gt;&lt;h4 id=&#34;type-inference--类型推理&#34;&gt;type inference  类型推理
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;kotlin&lt;/strong&gt;会在初始化时自动确定变量类型，称作类型推理。&lt;/p&gt;
&lt;p&gt;也可以自行指定类型，如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;val text: String = &amp;#34;Hello World!&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;val n: Int = 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;声明变量时必须有类型，即类型推理或自行指定类型。&lt;/p&gt;
&lt;p&gt;如果看到&lt;strong&gt;type mismatch&lt;/strong&gt;错误，则意味着为变量分配了不合适的内容。变量类型不能自动更改。&lt;/p&gt;
&lt;h3 id=&#34;注释&#34;&gt;注释
&lt;/h3&gt;&lt;h4 id=&#34;小技巧&#34;&gt;小技巧
&lt;/h4&gt;&lt;p&gt;原来&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;/&lt;/code&gt;在编辑器经常可以注释一行，才知道&lt;/p&gt;
&lt;h4 id=&#34;文档注释&#34;&gt;文档注释
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * The `main` function accepts string arguments from outside.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param args arguments from the command line.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;something&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;和多行注释相似，但是通过工具可以生成有关源代码文档。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt;输出的是不换行的，而&lt;code&gt;println&lt;/code&gt;换行，这有点像&lt;strong&gt;C&lt;/strong&gt;语言的&lt;code&gt;printf&lt;/code&gt;和&lt;code&gt;puts&lt;/code&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hello world!</title>
        <link>https://windclearing.github.io/p/hello-world/</link>
        <pubDate>Mon, 10 Feb 2025 15:37:31 +0800</pubDate>
        
        <guid>https://windclearing.github.io/p/hello-world/</guid>
        <description>&lt;p&gt;&lt;strong&gt;风澈&lt;/strong&gt;的第一篇个人博客！&lt;/p&gt;
&lt;p&gt;完全不会写blog呢~~~&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;博客笔记&#34;&gt;博客笔记
&lt;/h1&gt;&lt;h2 id=&#34;更新发布文章&#34;&gt;更新发布文章
&lt;/h2&gt;&lt;p&gt;内容更改之后，首先用powershell打开blog文件夹，键入 &lt;strong&gt;hugo&lt;/strong&gt; 命令，然后对public文件夹进行
&lt;strong&gt;git add .&lt;/strong&gt;
和
&lt;strong&gt;git commit -m &amp;ldquo;起一个commit名字&amp;rdquo;&lt;/strong&gt; ，再进行 &lt;strong&gt;git push&lt;/strong&gt; 操作，耐心等一分钟，就可以在网站上面看到更新！&lt;/p&gt;
&lt;h2 id=&#34;新建主页面&#34;&gt;新建主页面
&lt;/h2&gt;&lt;p&gt;创建新页面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    hugo new post/&amp;#34;随便一个名字（默认标题）&amp;#34;/index.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;之后可以预览：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    hugo server -D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其他的操作尚在学习当中，目前完全不了解&lt;strong&gt;qwq&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;V&lt;/code&gt; 可以预览md文件！&lt;/p&gt;
&lt;p&gt;很多 &lt;strong&gt;markdown&lt;/strong&gt; 语法也记不住www&lt;/p&gt;
&lt;h5 id=&#34;感谢教程-httpsratmomogithubio&#34;&gt;感谢教程 &lt;a class=&#34;link&#34; href=&#34;https://ratmomo.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ratmomo.github.io/&lt;/a&gt;
&lt;/h5&gt;&lt;h1 id=&#34;其他笔记&#34;&gt;其他笔记
&lt;/h1&gt;&lt;p&gt;写笔记还是太累了，根本没有精力记笔记。就暂时不继续更新了。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
